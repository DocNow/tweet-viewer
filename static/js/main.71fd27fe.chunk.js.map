{"version":3,"sources":["actions/index.js","reducers/index.js","components/App.js","containers/AppContainer.js","index.js"],"names":["REQUEST_TWEET_IDS","RECEIVE_TWEET_IDS","fetchTweetIds","dispatch","type","fetch","concat","process","then","response","ok","Error","statusText","text","receivedAt","Date","now","receiveTweetIds","tweetViewerApp","state","arguments","length","undefined","tweets","action","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","split","Symbol","iterator","next","done","id","value","push","err","return","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleScroll","ticking","requestAnimationFrame","update","postsToShow","document","documentElement","offsetHeight","window","scrollY","innerHeight","setState","addEventListener","props","removeEventListener","tweetIds","react_default","a","createElement","slice","map","t","i","tweet_embed_es","key","options","cards","Component","AppContainer","connect","store","createStore","reducers","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_AppContainer","getElementById"],"mappings":"yOAAaA,EAAoB,oBACpBC,EAAoB,oBA8BlBC,MAdf,WACE,OAAO,SAAAC,GAEL,OADAA,EAfK,CACLC,KAAMJ,IAeCK,MAAK,GAAAC,OAAIC,GAAJ,kBACTC,KAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAEvB,OAAOH,EAASI,SAEjBL,KAAK,SAAAK,GAAI,OAAIV,EAlBb,SAAyBU,GAC9B,MAAO,CACLT,KAAMH,EACNY,OACAC,WAAYC,KAAKC,OAcQC,CAAgBJ,QCX9BK,MAdf,WAAqD,IAA7BC,EAA6BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArB,CAACG,OAAO,IAAKC,EAAQJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQE,EAAOpB,MACb,KAAKH,EACH,IAAMsB,EAAS,GADjBE,GAAA,EAAAC,GAAA,EAAAC,OAAAL,EAAA,IAEE,QAAAM,EAAAC,EAAiBL,EAAOX,KAAKiB,MAAM,WAAnCC,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EAA+C,KAApCU,EAAoCP,EAAAQ,MAClC,KAAPD,GACJZ,EAAOc,KAAKF,IAJhB,MAAAG,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAI,EAAAU,QAAAV,EAAAU,SAAA,WAAAb,EAAA,MAAAC,GAME,MAAO,CAACJ,UACV,QACE,OAAOJ,oECgDEqB,cAtDb,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBFI,aAAe,WACRP,EAAKQ,UACRR,EAAKQ,SAAU,EACfC,sBAAsB,kBAAMT,EAAKU,aAtBvB,OAIZV,EAAKtB,MAAQ,CACXiC,YAHgB,IAFNX,wEAWVY,SAASC,gBAAgBC,cACxBC,OAAOC,QAAUD,OAAOE,aACJ,KACrBd,KAAKe,SAAS,CAAEP,YAAaR,KAAKzB,MAAMiC,YAAc,KAExDR,KAAKK,SAAU,8CAWfO,OAAOI,iBAAP,SAAkChB,KAAKI,cACvCJ,KAAKiB,MAAM3D,+DAIXsD,OAAOM,oBAAP,SAAqClB,KAAKI,cAC1CQ,OAAOJ,YAAcR,KAAKzB,MAAMiC,6CAIhC,IAAM7B,EAASqB,KAAKiB,MAAME,SAC1B,OAAQC,EAAAC,EAAAC,cAAA,OAAK/B,GAAG,eACdZ,EAAO4C,MAAM,EAAGvB,KAAKzB,MAAMiC,aAAagB,IAAI,SAACC,EAAGC,GAC9C,OAAQN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACNC,IAAG,IAAAlE,OAAMgE,GACTnC,GAAIkC,EACJI,QAAS,CAACC,MAAO,sBA5CTC,aCgBHC,EALMC,YAZG,SAAC1D,GACvB,MAAO,CACL4C,SAAU5C,EAAMI,SAIO,SAACpB,GAC1B,MAAO,CACLD,cAAe,WAAOC,EAASD,QAId2E,CAGnBrC,GCVIsC,EAAQC,YACZC,EACAC,YAAgBC,MAGlBC,IAASC,OACPpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUP,MAAOA,GACfd,EAAAC,EAAAC,cAACoB,EAAD,OAEFjC,SAASkC,eAAe","file":"static/js/main.71fd27fe.chunk.js","sourcesContent":["export const REQUEST_TWEET_IDS = 'REQUEST_TWEET_IDS'\nexport const RECEIVE_TWEET_IDS = 'RECEIVE_TWEET_IDS'\n\nexport function requestTweetIds(fomat) {\n  return {\n    type: REQUEST_TWEET_IDS\n  }\n}\n\nexport function receiveTweetIds(text) {\n  return {\n    type: RECEIVE_TWEET_IDS,\n    text,\n    receivedAt: Date.now()\n  }\n}\n\nfunction fetchTweetIds() {\n  return dispatch => {\n    dispatch(requestTweetIds())\n    return fetch(`${process.env.PUBLIC_URL}/data/ids.csv`)\n      .then(response => {\n        if (!response.ok) {\n          throw Error(response.statusText)\n        }\n        return response.text()\n      })\n      .then(text => dispatch(receiveTweetIds(text)))\n  }\n}\n\nexport default fetchTweetIds;","import { RECEIVE_TWEET_IDS } from '../actions'\n\nfunction tweetViewerApp(state = {tweets:[]}, action) {\n  switch (action.type) {\n    case RECEIVE_TWEET_IDS:\n      const tweets = []\n      for (const id of action.text.split(/[\\r\\n]+/)) {\n        if (id === '') continue\n        tweets.push(id)\n      }\n      return {tweets}\n    default:\n      return state\n  }\n}\n\nexport default tweetViewerApp;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport './App.css';\nimport TweetEmbed from 'react-tweet-embed'\n\nclass App extends Component {\n  constructor() {\n    super()\n    let postsToShow = 12\n\n    this.state = {\n      postsToShow,\n    }\n  }\n\n  update() {\n    const distanceToBottom =\n      document.documentElement.offsetHeight -\n      (window.scrollY + window.innerHeight)\n    if (distanceToBottom < 150) {\n      this.setState({ postsToShow: this.state.postsToShow + 12 })\n    }\n    this.ticking = false\n  }\n\n  handleScroll = () => {\n    if (!this.ticking) {\n      this.ticking = true\n      requestAnimationFrame(() => this.update())\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(`scroll`, this.handleScroll)\n    this.props.fetchTweetIds()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(`scroll`, this.handleScroll)\n    window.postsToShow = this.state.postsToShow\n  }\n\n  render() {\n    const tweets = this.props.tweetIds\n    return (<div id=\"docnow__scv\">{\n      tweets.slice(0, this.state.postsToShow).map((t, i) => {\n        return (<TweetEmbed\n          key={`t${i}`}\n          id={t}\n          options={{cards: 'hidden'}} />)\n      })\n    }</div>)\n  }\n}\n\nApp.propTypes = {\n  fetchTweetIds: PropTypes.func.isRequired,\n  tweetIds: PropTypes.array.isRequired\n}\n\nexport default App;\n","import { connect } from 'react-redux'\nimport fetchTweetIds from '../actions'\nimport App from '../components/App'\n\nconst mapStateToProps = (state) => {\n  return {\n    tweetIds: state.tweets\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    fetchTweetIds: () => {dispatch(fetchTweetIds())}\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\nexport default AppContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware } from 'redux'\nimport reducers from './reducers'\nimport './index.css';\nimport AppContainer from './containers/AppContainer';\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(thunkMiddleware)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}